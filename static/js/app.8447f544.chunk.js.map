{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","editText","setEditText","toDos","setToDos","tracking","trackWorking","a","async","AsyncStorage","setItem","JSON","stringify","console","warn","onEditText","payload","saveToDos","toSave","getToDos","getItem","getTrack","parse","useEffect","completeToDo","toDoKey","editToDos","Object","keys","forEach","key","isComplete","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","placeholder","onChangeText","value","onSubmitEditing","newToDos","Date","now","edit","returnKeyType","input","ScrollView","scrollView","map","toDo","Checkbox","checkbox","onValueChange","editInput","TouchableWithoutFeedback","toDoText","width","paddingVertical","paddingHorizontal","textDecorationLine","textDecorationStyle","onEdit","btn","disabled","FontAwesome5","name","size","Platform","OS","confirm","Alert","alert","removeToDo","StyleSheet","create","flex","backgroundColor","flexDirection","justifyContent","marginTop","btnText","borderRadius","marginVertical","marginBottom","alignItems","marginRight"],"mappings":"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","file":"static/js/app.8447f544.chunk.js","sourcesContent":["export const theme = {\r\n  bg: 'black',\r\n  grey: '#3a3d40',\r\n  toDoBg: '#5c5d60',\r\n};\r\n","import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  TouchableWithoutFeedback,\n  Platform,\n} from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { theme } from './colors';\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport Checkbox from 'expo-checkbox';\n\nconst STORAGE_KEY = '@toDos';\nconst STORAGE_TRACK_KEY = '@work';\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState('');\n  const [editText, setEditText] = useState('');\n  const [toDos, setToDos] = useState({});\n\n  const tracking = async (trackWorking) => {\n    try {\n      await AsyncStorage.setItem(\n        STORAGE_TRACK_KEY,\n        JSON.stringify(trackWorking)\n      );\n    } catch (err) {\n      console.warn(err);\n    }\n  };\n  const travel = () => {\n    setWorking(false);\n    tracking(false);\n  };\n  const work = () => {\n    setWorking(true);\n    tracking(true);\n  };\n  const onChangeText = (payload) => setText(payload);\n  const onEditText = (payload) => setEditText(payload);\n  const saveToDos = async (toSave) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (err) {\n      console.warn(err);\n    }\n  };\n  const getToDos = async () => {\n    try {\n      const getToDos = await AsyncStorage.getItem(STORAGE_KEY);\n      const getTrack = await AsyncStorage.getItem(STORAGE_TRACK_KEY);\n      setToDos(getToDos != null ? JSON.parse(getToDos) : {});\n      setWorking(getTrack != null ? JSON.parse(getTrack) : true);\n    } catch (err) {\n      console.warn(err);\n    }\n  };\n  useEffect(async () => {\n    await getToDos();\n  }, []);\n\n  const addToDo = async () => {\n    if (text === '') {\n      return;\n    }\n    // save to do\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, isComplete: false, edit: false },\n    };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText('');\n  };\n  const removeToDo = async (key) => {\n    if (Platform.OS === 'web') {\n      const ok = confirm('Are you sure to delete \"' + toDos[key].text + '?\"');\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\n        'Remove ToDo',\n        'Are you sure to delete \"' + toDos[key].text + '?\"',\n        [\n          {\n            text: 'Cancel',\n          },\n          {\n            text: 'OK',\n            style: 'destructive',\n            onPress: async () => {\n              const newToDos = { ...toDos };\n              delete newToDos[key];\n              setToDos(newToDos);\n              await saveToDos(newToDos);\n            },\n          },\n        ]\n      );\n    }\n  };\n  const completeToDo = async (toDoKey) => {\n    const editToDos = { ...toDos };\n    Object.keys(editToDos).forEach((key) => {\n      if (key === toDoKey) {\n        editToDos[toDoKey].isComplete = !editToDos[toDoKey].isComplete;\n      }\n    });\n    setToDos(editToDos);\n    await saveToDos(editToDos);\n  };\n  const onEdit = (toDoKey) => {\n    const editToDos = { ...toDos };\n    Object.keys(editToDos).forEach((key) => {\n      if (key === toDoKey) {\n        if (!editToDos[toDoKey].edit) {\n          setEditText('');\n        }\n        editToDos[toDoKey].edit = !editToDos[toDoKey].edit;\n      }\n    });\n    setToDos(editToDos);\n  };\n  const editToDos = async (toDoKey) => {\n    const editToDos = { ...toDos };\n    Object.keys(editToDos).forEach((key) => {\n      if (key === toDoKey) {\n        editToDos[toDoKey].text = editText;\n        editToDos[toDoKey].edit = false;\n      }\n    });\n    setToDos(editToDos);\n    await saveToDos(editToDos);\n    setEditText('');\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style='light' />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 40,\n              fontWeight: '600',\n              color: working ? 'white' : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 40,\n              fontWeight: '600',\n              color: working ? theme.grey : 'white',\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          placeholder={working ? 'Add a To Do' : 'Where do you want to go?'}\n          onChangeText={onChangeText}\n          value={text}\n          onSubmitEditing={addToDo}\n          returnKeyType='done'\n          style={styles.input}\n        />\n      </View>\n      <ScrollView style={styles.scrollView}>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View key={key} style={styles.toDo}>\n              <Checkbox\n                style={styles.checkbox}\n                value={toDos[key].isComplete}\n                onValueChange={() => completeToDo(key)}\n                color={theme.grey}\n              />\n              {toDos[key].edit ? (\n                <TextInput\n                  placeholder={toDos[key].text}\n                  onChangeText={onEditText}\n                  value={editText}\n                  onSubmitEditing={() => editToDos(key)}\n                  returnKeyType='done'\n                  style={styles.editInput}\n                />\n              ) : (\n                <TouchableWithoutFeedback onPress={() => completeToDo(key)}>\n                  <Text\n                    style={{\n                      ...styles.toDoText,\n                      fontSize: 16,\n                      fontWeight: '500',\n                      width: 'calc(100% - 24px - 48px - 46px)',\n                      paddingVertical: 8,\n                      paddingHorizontal: 8,\n                      textDecorationLine: toDos[key].isComplete\n                        ? 'line-through'\n                        : 'none',\n                      textDecorationStyle: 'solid',\n                      color: toDos[key].isComplete ? theme.grey : 'white',\n                    }}\n                  >\n                    {toDos[key].text}\n                  </Text>\n                </TouchableWithoutFeedback>\n              )}\n              <TouchableOpacity\n                onPress={() => onEdit(key)}\n                style={styles.btn}\n                disabled={toDos[key].isComplete}\n              >\n                <FontAwesome5\n                  name='pencil-alt'\n                  size={16}\n                  color={toDos[key].isComplete ? 'transparent' : theme.grey}\n                />\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={() => removeToDo(key)}\n                style={styles.btn}\n              >\n                <FontAwesome5 name='trash-alt' size={16} color={theme.grey} />\n              </TouchableOpacity>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 40,\n  },\n  btnText: {},\n  input: {\n    backgroundColor: 'white',\n    paddingVertical: 8,\n    paddingHorizontal: 15,\n    borderRadius: 25,\n    marginTop: 20,\n    fontSize: 18,\n  },\n  scrollView: {\n    marginVertical: 15,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 15,\n    paddingVertical: 8,\n    paddingHorizontal: 15,\n    borderRadius: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  checkbox: {\n    marginRight: 8,\n  },\n  editInput: {\n    backgroundColor: 'white',\n    borderRadius: 5,\n    fontSize: 16,\n    fontWeight: '500',\n    width: 'calc(100% - 24px - 48px - 46px)',\n    paddingVertical: 8,\n    paddingHorizontal: 8,\n  },\n  toDoText: {\n    color: 'white',\n  },\n  btn: {\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n});\n"],"sourceRoot":""}